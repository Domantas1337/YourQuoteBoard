// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourQuoteBoard.Data;

#nullable disable

namespace YourQuoteBoard.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240831054625_BookRatingMigration")]
    partial class BookRatingMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("BookTag", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagsTagId")
                        .HasColumnType("TEXT");

                    b.HasKey("BookId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("BookTag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuoteFolderJointTable", b =>
                {
                    b.Property<Guid>("FoldersFolderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuotesQuoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("FoldersFolderId", "QuotesQuoteId");

                    b.HasIndex("QuotesQuoteId");

                    b.ToTable("QuoteFolderJointTable");
                });

            modelBuilder.Entity("QuoteTag", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagsTagId")
                        .HasColumnType("TEXT");

                    b.HasKey("QuoteId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("QuoteTag");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.BookRatingSummary", b =>
                {
                    b.Property<Guid>("BookRatingSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfRatings")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingCategory")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookRatingSummaryId");

                    b.HasIndex("BookId");

                    b.ToTable("BookRatingSummaries");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Books.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageOverallRating")
                        .HasColumnType("REAL");

                    b.Property<string>("CoverImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfOverallRatings")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Books.BookRating", b =>
                {
                    b.Property<Guid>("BookRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<double>("OverallRating")
                        .HasColumnType("REAL");

                    b.HasKey("BookRatingId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookId");

                    b.ToTable("BookRatings");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Books.BookSpecificRating", b =>
                {
                    b.Property<Guid>("BookSpecificRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookRatingId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Rating")
                        .HasColumnType("REAL");

                    b.Property<int>("RatingCategory")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookSpecificRatingId");

                    b.HasIndex("BookRatingId");

                    b.ToTable("BookSpecificRatings");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Favorite", b =>
                {
                    b.Property<Guid>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeAdded")
                        .HasColumnType("TEXT");

                    b.HasKey("FavoriteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("QuoteId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Folder", b =>
                {
                    b.Property<Guid>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("childQuotesCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("FolderId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.Quote", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageOverallRating")
                        .HasColumnType("REAL");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Genre")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfOverallRatings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuoteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.QuoteRating", b =>
                {
                    b.Property<Guid>("QuoteRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("OverallRating")
                        .HasColumnType("REAL");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("QuoteRatingId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteRatings");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.QuoteRatingSummary", b =>
                {
                    b.Property<Guid>("QuoteRatingSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<int>("NumberOfRatings")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingCategory")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuoteRatingSummaryId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteRatingSummaries");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.QuoteSpecificRating", b =>
                {
                    b.Property<Guid>("QuoteSpecificRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuoteRatingId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Rating")
                        .HasColumnType("REAL");

                    b.Property<int>("RatingCategory")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuoteSpecificRatingId");

                    b.HasIndex("QuoteRatingId");

                    b.ToTable("QuoteSpecificRatings");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Discriminator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("cf6c5337-10e9-48d9-9022-864ca0ff959c"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Inspirational"
                        },
                        new
                        {
                            TagId = new Guid("04e0a766-8b37-4eec-8bf6-3fcd24ae67b4"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Funny"
                        },
                        new
                        {
                            TagId = new Guid("209f7d62-2b2a-4e73-a476-291d793fd44d"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Philosophical"
                        },
                        new
                        {
                            TagId = new Guid("0b1b930e-3812-4e78-882e-3223db35622d"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Literary"
                        },
                        new
                        {
                            TagId = new Guid("5993e16c-f75a-414c-852c-73de49ba5ef4"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Sad"
                        },
                        new
                        {
                            TagId = new Guid("8f801b50-959d-4030-94fa-b16aa1f0f235"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Emotional"
                        },
                        new
                        {
                            TagId = new Guid("d838e817-7fec-4280-812b-153015b8f088"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Informative"
                        },
                        new
                        {
                            TagId = new Guid("a0ba04a2-8b51-40ca-81e6-f04e8f19babe"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Biography"
                        },
                        new
                        {
                            TagId = new Guid("93436277-e29b-485b-bf68-3dbc1e6dca19"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Fiction"
                        },
                        new
                        {
                            TagId = new Guid("317dbb97-322c-4558-b3df-9fa645d491d7"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Autobiography"
                        },
                        new
                        {
                            TagId = new Guid("513e39f8-2785-4efb-92bd-5e8ad0268d01"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Novel"
                        },
                        new
                        {
                            TagId = new Guid("51f8c642-92f1-428a-bba9-2a3e9822e3c9"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Romantic"
                        },
                        new
                        {
                            TagId = new Guid("d4fd5a66-5aaa-4033-82e8-162e7ba64283"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Non_Fiction"
                        },
                        new
                        {
                            TagId = new Guid("0711ef55-bfde-4f6e-8f55-afc14e306806"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("YourQuoteBoard.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("BookTag", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Books.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuoteFolderJointTable", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Folder", null)
                        .WithMany()
                        .HasForeignKey("FoldersFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Quotes.Quote", null)
                        .WithMany()
                        .HasForeignKey("QuotesQuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuoteTag", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Quotes.Quote", null)
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.BookRatingSummary", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Books.Book", "Book")
                        .WithMany("RatingSummaries")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Books.BookRating", b =>
                {
                    b.HasOne("YourQuoteBoard.Data.ApplicationUser", null)
                        .WithMany("BookRatings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Books.Book", "Book")
                        .WithMany("BookRatings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Books.BookSpecificRating", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Books.BookRating", "BookRating")
                        .WithMany("SpecificRatings")
                        .HasForeignKey("BookRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookRating");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Favorite", b =>
                {
                    b.HasOne("YourQuoteBoard.Data.ApplicationUser", null)
                        .WithMany("Favorites")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Quotes.Quote", null)
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Folder", b =>
                {
                    b.HasOne("YourQuoteBoard.Data.ApplicationUser", null)
                        .WithMany("Folders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.Quote", b =>
                {
                    b.HasOne("YourQuoteBoard.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Quotes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Books.Book", "Book")
                        .WithMany("Quotes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.QuoteRating", b =>
                {
                    b.HasOne("YourQuoteBoard.Data.ApplicationUser", null)
                        .WithMany("QuoteRatings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Quotes.Quote", "Quote")
                        .WithMany("QuoteRatings")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.QuoteRatingSummary", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Quotes.Quote", "Quote")
                        .WithMany("RatingSummaries")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.QuoteSpecificRating", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Quotes.QuoteRating", "QuoteRating")
                        .WithMany("SpecificRatings")
                        .HasForeignKey("QuoteRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuoteRating");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Books.Book", b =>
                {
                    b.Navigation("BookRatings");

                    b.Navigation("Quotes");

                    b.Navigation("RatingSummaries");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Books.BookRating", b =>
                {
                    b.Navigation("SpecificRatings");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.Quote", b =>
                {
                    b.Navigation("QuoteRatings");

                    b.Navigation("RatingSummaries");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quotes.QuoteRating", b =>
                {
                    b.Navigation("SpecificRatings");
                });

            modelBuilder.Entity("YourQuoteBoard.Data.ApplicationUser", b =>
                {
                    b.Navigation("BookRatings");

                    b.Navigation("Favorites");

                    b.Navigation("Folders");

                    b.Navigation("QuoteRatings");

                    b.Navigation("Quotes");
                });
#pragma warning restore 612, 618
        }
    }
}
