// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourQuoteBoard.Data;

#nullable disable

namespace YourQuoteBoard.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240723132002_booktagtable")]
    partial class booktagtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("BookTags", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.HasKey("BookId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTags", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuoteFolderJointTable", b =>
                {
                    b.Property<Guid>("FoldersFolderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuotesQuoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("FoldersFolderId", "QuotesQuoteId");

                    b.HasIndex("QuotesQuoteId");

                    b.ToTable("QuoteFolderJointTable");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<string>("CoverImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfRatings")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.BookRating", b =>
                {
                    b.Property<Guid>("BookRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("AccuracyRating")
                        .HasColumnType("REAL");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("CharacterDevelopmentRating")
                        .HasColumnType("REAL");

                    b.Property<double?>("OverallRating")
                        .HasColumnType("REAL");

                    b.Property<double?>("PlotRating")
                        .HasColumnType("REAL");

                    b.Property<double?>("WorldBuildingRating")
                        .HasColumnType("REAL");

                    b.Property<double?>("WritingStyleRating")
                        .HasColumnType("REAL");

                    b.HasKey("BookRatingId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookId");

                    b.ToTable("BookRatings");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Folder", b =>
                {
                    b.Property<Guid>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("childQuotesCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("FolderId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quote", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfRatings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuoteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.QuoteRating", b =>
                {
                    b.Property<Guid>("QuoteRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("InspirationalValueRating")
                        .HasColumnType("REAL");

                    b.Property<double>("OriginalityRating")
                        .HasColumnType("REAL");

                    b.Property<double>("OverallRating")
                        .HasColumnType("REAL");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("TEXT");

                    b.Property<double>("RelevanceToTheTopicRating")
                        .HasColumnType("REAL");

                    b.HasKey("QuoteRatingId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteRatings");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Discriminator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.HasIndex("QuoteId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("2a5bd8f0-c4e3-4cfa-8772-4924d6ceb0fb"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Inspirational"
                        },
                        new
                        {
                            TagId = new Guid("3773ac71-dff3-4685-9e2e-2f694601e698"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Funny"
                        },
                        new
                        {
                            TagId = new Guid("52d44b8c-a0ca-4ab2-88f6-b137d59240cf"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Philosophical"
                        },
                        new
                        {
                            TagId = new Guid("b801714e-d576-4b25-953b-9a3ac4a749bd"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Literary"
                        },
                        new
                        {
                            TagId = new Guid("8754285f-3ff0-4db9-a5a2-17710ffa0e6b"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Sad"
                        },
                        new
                        {
                            TagId = new Guid("62f8cbbc-bd28-4a23-9baa-5c5e44500598"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Emotional"
                        },
                        new
                        {
                            TagId = new Guid("b5888ed1-1d1c-4588-b9b4-50dcfe53abed"),
                            Discriminator = 0,
                            IsDefault = true,
                            Name = "Informative"
                        },
                        new
                        {
                            TagId = new Guid("5902fff9-1a6c-4adf-8479-2c3dbb99aaf7"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Biography"
                        },
                        new
                        {
                            TagId = new Guid("9a0147c5-fd78-4980-97ab-8a6014da57d7"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Fiction"
                        },
                        new
                        {
                            TagId = new Guid("2852429f-a67d-4917-a960-71d9b10093df"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Autobiography"
                        },
                        new
                        {
                            TagId = new Guid("59c806c0-bc5b-4eeb-bb27-143502fb3660"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Novel"
                        },
                        new
                        {
                            TagId = new Guid("497cfed3-af94-4581-a88d-7ada13dfe2d3"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Romantic"
                        },
                        new
                        {
                            TagId = new Guid("05a8fad7-c372-4781-b717-1cda4194e77d"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Non_Fiction"
                        },
                        new
                        {
                            TagId = new Guid("9c6d1b83-7e9e-4123-829f-cc352c82a3c7"),
                            Discriminator = 1,
                            IsDefault = true,
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("YourQuoteBoard.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuoteFolderJointTable", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Folder", null)
                        .WithMany()
                        .HasForeignKey("FoldersFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Quote", null)
                        .WithMany()
                        .HasForeignKey("QuotesQuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.BookRating", b =>
                {
                    b.HasOne("YourQuoteBoard.Data.ApplicationUser", null)
                        .WithMany("BookRatings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Book", "Book")
                        .WithMany("BookRatings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Folder", b =>
                {
                    b.HasOne("YourQuoteBoard.Data.ApplicationUser", null)
                        .WithMany("Folders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quote", b =>
                {
                    b.HasOne("YourQuoteBoard.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Quotes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Book", "Book")
                        .WithMany("Quotes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.QuoteRating", b =>
                {
                    b.HasOne("YourQuoteBoard.Data.ApplicationUser", null)
                        .WithMany("QuoteRatings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourQuoteBoard.Entity.Quote", "Quote")
                        .WithMany("QuoteRatings")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Tag", b =>
                {
                    b.HasOne("YourQuoteBoard.Entity.Quote", null)
                        .WithMany("QuoteTags")
                        .HasForeignKey("QuoteId");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Book", b =>
                {
                    b.Navigation("BookRatings");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("YourQuoteBoard.Entity.Quote", b =>
                {
                    b.Navigation("QuoteRatings");

                    b.Navigation("QuoteTags");
                });

            modelBuilder.Entity("YourQuoteBoard.Data.ApplicationUser", b =>
                {
                    b.Navigation("BookRatings");

                    b.Navigation("Folders");

                    b.Navigation("QuoteRatings");

                    b.Navigation("Quotes");
                });
#pragma warning restore 612, 618
        }
    }
}
